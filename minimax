#include "headers.h"


int miniMax(int board[8][7], time_t start, double tMax, int player)
{
    int cBoard[8][7];
    int cScore;
    int score = std::numeric_limits<int>::max();
    int cx = 0;
    int depth = 0;


    if (player == 1)
    {
        for (int dMax = 1; dMax <= numOpenSpaces(board); dMax++)
        {
            for (int x = 0; x < 8; x++)
            {
                if (difftime(time(0), start) >= tMax)
                {
                    takeTurn(board, cx, 2);
                    return cx;
                }
                if (board[x][0] == 0){
                    copyBoard(board, cBoard);
                    takeTurn(cBoard, x, 1);
                    cScore = fMin(board, depth+1, dMax);
                        if (score > cScore){
                            score = cScore;
                            cx = x;
                        }
                }
            }
        }
    }

    else if (player == 2)
    {
        for (int dMax = 1; dMax <= numOpenSpaces(board); dMax++)
        {
            for (int x = 0; x < 8; x++)
            {
                if (difftime(time(0), start) >= tMax)
                {
                    takeTurn(board, cx, 2);
                    return cx;
                }
                if (board[x][0] == 0){
                    copyBoard(board, cBoard);
                    takeTurn(cBoard, x, 2);
                    cScore = fMax(board, depth+1, dMax);
                        if (score < cScore){
                            score = cScore;
                            cx = x;
                        }
                }
            }
        }
    }


    takeTurn(board, cx, 2);
    return cx;

}

int fMin (int board[8][7], int depth, int dMax)
{
    int cBoard[8][7];
    int tBoard[8][7];
    int cScore;
    bool f = false;
    int score = std::numeric_limits<int>::max();
    if (depth == dMax){
        return checkBoardState(board);
    }

    for (int x = 0; x < 8; x++)
    {
        if (board[x][0] == 0){
                copyBoard(board, cBoard);
                takeTurn(cBoard, x, 2);
            if (f == false){
                f = true;
                copyBoard(cBoard, tBoard);
            }
            else
            {
                if (depth >= 2){
                    if(checkBoardState(cBoard) <= checkBoardState(tBoard)){
                        copyBoard(cBoard, tBoard);
                        cScore = fMax(cBoard, depth+1, dMax);

                        if (score <= cScore)
                            score = cScore;
                    }
                }
                else {
                    cScore = fMax(cBoard, depth+1, dMax);
                    if (score <= cScore)
                        score = cScore;
                }
            }
        }
    }
    return score;
}

int fMax (int board[8][7], int depth, int dMax)
{
    int cBoard[8][7];
    int tBoard[8][7];
    int cScore;
    bool f = false;
    int score = std::numeric_limits<int>::min();
    if (depth == dMax){
        return checkBoardState(board);
    }

    for (int x = 0; x < 8; x++)
    {
        if (board[x][0] == 0){
            if (f == false){
                f = true;
                copyBoard(board, cBoard);
                takeTurn(cBoard, x, 1);
                copyBoard(cBoard, tBoard);
            }
            else
            {
                copyBoard(board, cBoard);
                takeTurn(cBoard, x, 1);
                if (depth >= 2){
                    if(checkBoardState(cBoard) >= checkBoardState(tBoard)){
                        copyBoard(cBoard, tBoard);
                        cScore = fMin(cBoard, depth+1, dMax);
                        if (score >= cScore)
                            score = cScore;
                    }
                }
                else {
                    cScore = fMax(cBoard, depth+1, dMax);
                    if (score >= cScore)
                        score = cScore;
                }
            }
        }
    }
    return score;
}
